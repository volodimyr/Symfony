// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CarOrder is an object representing the database table.
type CarOrder struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	StartAt   time.Time `boil:"start_at" json:"start_at" toml:"start_at" yaml:"start_at"`
	EndAt     time.Time `boil:"end_at" json:"end_at" toml:"end_at" yaml:"end_at"`
	CarID     int       `boil:"car_id" json:"car_id" toml:"car_id" yaml:"car_id"`

	R *carOrderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L carOrderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CarOrderColumns = struct {
	ID        string
	DeletedAt string
	StartAt   string
	EndAt     string
	CarID     string
}{
	ID:        "id",
	DeletedAt: "deleted_at",
	StartAt:   "start_at",
	EndAt:     "end_at",
	CarID:     "car_id",
}

var CarOrderTableColumns = struct {
	ID        string
	DeletedAt string
	StartAt   string
	EndAt     string
	CarID     string
}{
	ID:        "car_orders.id",
	DeletedAt: "car_orders.deleted_at",
	StartAt:   "car_orders.start_at",
	EndAt:     "car_orders.end_at",
	CarID:     "car_orders.car_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CarOrderWhere = struct {
	ID        whereHelperint
	DeletedAt whereHelpernull_Time
	StartAt   whereHelpertime_Time
	EndAt     whereHelpertime_Time
	CarID     whereHelperint
}{
	ID:        whereHelperint{field: "\"car_orders\".\"id\""},
	DeletedAt: whereHelpernull_Time{field: "\"car_orders\".\"deleted_at\""},
	StartAt:   whereHelpertime_Time{field: "\"car_orders\".\"start_at\""},
	EndAt:     whereHelpertime_Time{field: "\"car_orders\".\"end_at\""},
	CarID:     whereHelperint{field: "\"car_orders\".\"car_id\""},
}

// CarOrderRels is where relationship names are stored.
var CarOrderRels = struct {
	Car string
}{
	Car: "Car",
}

// carOrderR is where relationships are stored.
type carOrderR struct {
	Car *Car `boil:"Car" json:"Car" toml:"Car" yaml:"Car"`
}

// NewStruct creates a new relationship struct
func (*carOrderR) NewStruct() *carOrderR {
	return &carOrderR{}
}

// carOrderL is where Load methods for each relationship are stored.
type carOrderL struct{}

var (
	carOrderAllColumns            = []string{"id", "deleted_at", "start_at", "end_at", "car_id"}
	carOrderColumnsWithoutDefault = []string{"deleted_at", "start_at", "end_at", "car_id"}
	carOrderColumnsWithDefault    = []string{"id"}
	carOrderPrimaryKeyColumns     = []string{"id"}
)

type (
	// CarOrderSlice is an alias for a slice of pointers to CarOrder.
	// This should almost always be used instead of []CarOrder.
	CarOrderSlice []*CarOrder
	// CarOrderHook is the signature for custom CarOrder hook methods
	CarOrderHook func(context.Context, boil.ContextExecutor, *CarOrder) error

	carOrderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	carOrderType                 = reflect.TypeOf(&CarOrder{})
	carOrderMapping              = queries.MakeStructMapping(carOrderType)
	carOrderPrimaryKeyMapping, _ = queries.BindMapping(carOrderType, carOrderMapping, carOrderPrimaryKeyColumns)
	carOrderInsertCacheMut       sync.RWMutex
	carOrderInsertCache          = make(map[string]insertCache)
	carOrderUpdateCacheMut       sync.RWMutex
	carOrderUpdateCache          = make(map[string]updateCache)
	carOrderUpsertCacheMut       sync.RWMutex
	carOrderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var carOrderBeforeInsertHooks []CarOrderHook
var carOrderBeforeUpdateHooks []CarOrderHook
var carOrderBeforeDeleteHooks []CarOrderHook
var carOrderBeforeUpsertHooks []CarOrderHook

var carOrderAfterInsertHooks []CarOrderHook
var carOrderAfterSelectHooks []CarOrderHook
var carOrderAfterUpdateHooks []CarOrderHook
var carOrderAfterDeleteHooks []CarOrderHook
var carOrderAfterUpsertHooks []CarOrderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CarOrder) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carOrderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CarOrder) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carOrderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CarOrder) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carOrderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CarOrder) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carOrderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CarOrder) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carOrderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CarOrder) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carOrderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CarOrder) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carOrderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CarOrder) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carOrderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CarOrder) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range carOrderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCarOrderHook registers your hook function for all future operations.
func AddCarOrderHook(hookPoint boil.HookPoint, carOrderHook CarOrderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		carOrderBeforeInsertHooks = append(carOrderBeforeInsertHooks, carOrderHook)
	case boil.BeforeUpdateHook:
		carOrderBeforeUpdateHooks = append(carOrderBeforeUpdateHooks, carOrderHook)
	case boil.BeforeDeleteHook:
		carOrderBeforeDeleteHooks = append(carOrderBeforeDeleteHooks, carOrderHook)
	case boil.BeforeUpsertHook:
		carOrderBeforeUpsertHooks = append(carOrderBeforeUpsertHooks, carOrderHook)
	case boil.AfterInsertHook:
		carOrderAfterInsertHooks = append(carOrderAfterInsertHooks, carOrderHook)
	case boil.AfterSelectHook:
		carOrderAfterSelectHooks = append(carOrderAfterSelectHooks, carOrderHook)
	case boil.AfterUpdateHook:
		carOrderAfterUpdateHooks = append(carOrderAfterUpdateHooks, carOrderHook)
	case boil.AfterDeleteHook:
		carOrderAfterDeleteHooks = append(carOrderAfterDeleteHooks, carOrderHook)
	case boil.AfterUpsertHook:
		carOrderAfterUpsertHooks = append(carOrderAfterUpsertHooks, carOrderHook)
	}
}

// OneG returns a single carOrder record from the query using the global executor.
func (q carOrderQuery) OneG(ctx context.Context) (*CarOrder, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single carOrder record from the query.
func (q carOrderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CarOrder, error) {
	o := &CarOrder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for car_orders")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CarOrder records from the query using the global executor.
func (q carOrderQuery) AllG(ctx context.Context) (CarOrderSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CarOrder records from the query.
func (q carOrderQuery) All(ctx context.Context, exec boil.ContextExecutor) (CarOrderSlice, error) {
	var o []*CarOrder

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CarOrder slice")
	}

	if len(carOrderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CarOrder records in the query, and panics on error.
func (q carOrderQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CarOrder records in the query.
func (q carOrderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count car_orders rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q carOrderQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q carOrderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if car_orders exists")
	}

	return count > 0, nil
}

// Car pointed to by the foreign key.
func (o *CarOrder) Car(mods ...qm.QueryMod) carQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CarID),
	}

	queryMods = append(queryMods, mods...)

	query := Cars(queryMods...)
	queries.SetFrom(query.Query, "\"cars\"")

	return query
}

// LoadCar allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (carOrderL) LoadCar(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCarOrder interface{}, mods queries.Applicator) error {
	var slice []*CarOrder
	var object *CarOrder

	if singular {
		object = maybeCarOrder.(*CarOrder)
	} else {
		slice = *maybeCarOrder.(*[]*CarOrder)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &carOrderR{}
		}
		args = append(args, object.CarID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &carOrderR{}
			}

			for _, a := range args {
				if a == obj.CarID {
					continue Outer
				}
			}

			args = append(args, obj.CarID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cars`),
		qm.WhereIn(`cars.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Car")
	}

	var resultSlice []*Car
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Car")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cars")
	}

	if len(carOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Car = foreign
		if foreign.R == nil {
			foreign.R = &carR{}
		}
		foreign.R.CarOrders = append(foreign.R.CarOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CarID == foreign.ID {
				local.R.Car = foreign
				if foreign.R == nil {
					foreign.R = &carR{}
				}
				foreign.R.CarOrders = append(foreign.R.CarOrders, local)
				break
			}
		}
	}

	return nil
}

// SetCarG of the carOrder to the related item.
// Sets o.R.Car to related.
// Adds o to related.R.CarOrders.
// Uses the global database handle.
func (o *CarOrder) SetCarG(ctx context.Context, insert bool, related *Car) error {
	return o.SetCar(ctx, boil.GetContextDB(), insert, related)
}

// SetCar of the carOrder to the related item.
// Sets o.R.Car to related.
// Adds o to related.R.CarOrders.
func (o *CarOrder) SetCar(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Car) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"car_orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"car_id"}),
		strmangle.WhereClause("\"", "\"", 2, carOrderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CarID = related.ID
	if o.R == nil {
		o.R = &carOrderR{
			Car: related,
		}
	} else {
		o.R.Car = related
	}

	if related.R == nil {
		related.R = &carR{
			CarOrders: CarOrderSlice{o},
		}
	} else {
		related.R.CarOrders = append(related.R.CarOrders, o)
	}

	return nil
}

// CarOrders retrieves all the records using an executor.
func CarOrders(mods ...qm.QueryMod) carOrderQuery {
	mods = append(mods, qm.From("\"car_orders\""))
	return carOrderQuery{NewQuery(mods...)}
}

// FindCarOrderG retrieves a single record by ID.
func FindCarOrderG(ctx context.Context, iD int, selectCols ...string) (*CarOrder, error) {
	return FindCarOrder(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCarOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCarOrder(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CarOrder, error) {
	carOrderObj := &CarOrder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"car_orders\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, carOrderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from car_orders")
	}

	if err = carOrderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return carOrderObj, err
	}

	return carOrderObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CarOrder) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CarOrder) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no car_orders provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(carOrderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	carOrderInsertCacheMut.RLock()
	cache, cached := carOrderInsertCache[key]
	carOrderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			carOrderAllColumns,
			carOrderColumnsWithDefault,
			carOrderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(carOrderType, carOrderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(carOrderType, carOrderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"car_orders\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"car_orders\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into car_orders")
	}

	if !cached {
		carOrderInsertCacheMut.Lock()
		carOrderInsertCache[key] = cache
		carOrderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CarOrder record using the global executor.
// See Update for more documentation.
func (o *CarOrder) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CarOrder.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CarOrder) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	carOrderUpdateCacheMut.RLock()
	cache, cached := carOrderUpdateCache[key]
	carOrderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			carOrderAllColumns,
			carOrderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update car_orders, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"car_orders\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, carOrderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(carOrderType, carOrderMapping, append(wl, carOrderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update car_orders row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for car_orders")
	}

	if !cached {
		carOrderUpdateCacheMut.Lock()
		carOrderUpdateCache[key] = cache
		carOrderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q carOrderQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q carOrderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for car_orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for car_orders")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CarOrderSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CarOrderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), carOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"car_orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, carOrderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in carOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all carOrder")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CarOrder) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CarOrder) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no car_orders provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(carOrderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	carOrderUpsertCacheMut.RLock()
	cache, cached := carOrderUpsertCache[key]
	carOrderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			carOrderAllColumns,
			carOrderColumnsWithDefault,
			carOrderColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			carOrderAllColumns,
			carOrderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert car_orders, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(carOrderPrimaryKeyColumns))
			copy(conflict, carOrderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"car_orders\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(carOrderType, carOrderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(carOrderType, carOrderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert car_orders")
	}

	if !cached {
		carOrderUpsertCacheMut.Lock()
		carOrderUpsertCache[key] = cache
		carOrderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CarOrder record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CarOrder) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CarOrder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CarOrder) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CarOrder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), carOrderPrimaryKeyMapping)
	sql := "DELETE FROM \"car_orders\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from car_orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for car_orders")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q carOrderQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q carOrderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no carOrderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from car_orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for car_orders")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CarOrderSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CarOrderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(carOrderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), carOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"car_orders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, carOrderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from carOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for car_orders")
	}

	if len(carOrderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CarOrder) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no CarOrder provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CarOrder) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCarOrder(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CarOrderSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CarOrderSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CarOrderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CarOrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), carOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"car_orders\".* FROM \"car_orders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, carOrderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CarOrderSlice")
	}

	*o = slice

	return nil
}

// CarOrderExistsG checks if the CarOrder row exists.
func CarOrderExistsG(ctx context.Context, iD int) (bool, error) {
	return CarOrderExists(ctx, boil.GetContextDB(), iD)
}

// CarOrderExists checks if the CarOrder row exists.
func CarOrderExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"car_orders\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if car_orders exists")
	}

	return exists, nil
}
